---

# Deploy (set to 'absent' to un-deploy)
graph_state: present

# The: -
# - Namespace
# - graph PVC name,
#   which is either pre-previsioned or self-provisioned (see below)
# - graph (neo4j) password (which cannot be neo4j)
#   The password is saved in secrets deployed to the namespace.
#   The username is assumed to be 'neo4j'
graph_namespace: graph
graph_pvc: graph
graph_password: "{{ lookup('password',  '/dev/null length=12 chars=ascii_letters') }}"
# If you want the role to create the PVC and namespace
# (i.e. it is not pre-provisioned) then
# set a value for 'graph_volume_size_g'.
# If you have pre-provisioned the PVC (and namespace)
# then set 'graph_volume_size_g' to 0.
#
# If you define a volume size then you need to
# define a storage class.
graph_volume_size_g: 295
graph_pvc_storage_class: local-disk1

# The origin of the graph data.
# It's on an S3 bucket and a path...
graph_bucket: im-fragnet
graph_bucket_path: build/vendor/toxcast/2019-10-24/build-1
# Yes to wipe the graph data directory prior to the sync.
# The state of this value is used to pass either "Yes" or "no"
# to the loader container's GRAPH_WIPE variable.
graph_wipe: yes

# Path to built-in cypher scripts (in 'files').
# Default content can be found in files directory.
# Set to an empty string to skip.
#
# Alternatively, if the built-in scripts are not suitable,
# the user can specify their own content using '*_content' variables while
# setting the corresponding script to ''.
#
# For example, if you want to run 'CALL apoc.warmup.run(false, false, true);'
# every time the Graph starts (i.e. to load the cache and prime the indexes)
# set the value of 'graph_cypher_script_always_content' to
# 'CALL apoc.warmup.run(false, false, true);' and then
# set 'graph_cypher_script_always' to ''.
graph_cypher_script_once: cypher-script.once
graph_cypher_script_always: cypher-script.always

# Container images.
# There's an S3 'loader' and a 'graph'
# and they share the same tag.
graph_image_registry: docker.io
graph_loader_image: informaticsmatters/neo4j-s3-loader
graph_image: informaticsmatters/neo4j
graph_tag: '3.5.19'
graph_pull_policy: IfNotPresent
graph_loader_wait_for_completion: yes

# Providing your own Kubernetes image pull secrets.
#
# If you have moved our public images to
# your own private binary repository like JFrog Artifactory
# you probably need to provide a pull secret for them.
# One pull secret must valid for all images.
#
#   - Create the application namespaces in advance of the playbooks
#   - Create the pull secret in each namespace
#   - Provide the name of the secret in the following variable
#     (which will be used for all images)
#
# You must use all public images or you must use all private images.
# You cannot put some images into a private repo and rely on
# public images for the rest - it's "all or none".
all_image_preset_pullsecret_name: ''

# Graph image memory sizing...
graph_pagecache_size_g: 32
graph_heap_g: 8
graph_mem_request_g: 48
# The CPU core request and limit.
# Measured in whole cores.
graph_core_request: 4
graph_core_limit: 16

# Timeout for loader and graph pods...
#
# Be prepared for a long wait for large graphs.
# It can take around 40 minutes for 25Gi of data
# to arrive in the input directory.
graph_loader_pod_ready_timeout_minutes: 90
# Graph loader Pod post-sleep seconds.
# If set this causes the loader pod to sleep prior to completion.
# Mainly to allow connection and debug.
graph_loader_post_sleep_s: 0

graph_pod_ready_timeout: 300

# An S3 endpoint (typically for on-site S3 storage)
# If set a config-map maps a config file int ~/.aws/config.
# This requires a suitable graph image
# (one with the 'awscli_plugin_endpoint' Python module installed).
# Leave blank for an AWS S3 bucket.
#
# If you set this - omit the 'https://' prefix - i.e. just
# the endpoint (like 'example.com').
graph_s3_endpoint: ''

#------------------------------------------------------------------------------

# Picked up from the environment
# (typically injected by AWX/Tower)...

aws_access_key_id: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
aws_secret_access_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
aws_default_region: eu-central-1
