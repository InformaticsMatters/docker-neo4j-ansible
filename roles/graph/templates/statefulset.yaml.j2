---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: graph
  namespace: {{ graph_namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: graph
  serviceName: graph
  template:
    metadata:
      name: graph
      labels:
        name: graph
    spec:
      serviceAccountName: {{ graph_sa }}
      securityContext:
        fsGroup: 2000

      # We must have a 'core' node
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: informaticsmatters.com/purpose
                operator: In
                values:
                - core

{% if all_image_preset_pullsecret_name|string|length > 0 %}
      imagePullSecrets:
      - name: {{ all_image_preset_pullsecret_name }}
{% endif %}

      # The initContainers stage simply invokes the loader image
      # which is responsible for synchronising the chosen S3 graph
      # data with the container's 'loader' directory.
      initContainers:
      - name: graph-loader
        image: "{{ graph_image_registry }}/{{ graph_loader_image }}:{{ graph_tag }}"
        imagePullPolicy: {{ graph_pull_policy }}
        terminationMessagePolicy: FallbackToLogsOnError
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: graph-secrets
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: graph-secrets
              key: aws_secret_access_key
        - name: AWS_DEFAULT_REGION
          value: {{ aws_default_region }}
        - name: AWS_BUCKET
          value: {{ graph_bucket }}
        - name: AWS_BUCKET_PATH
          value: {{ graph_bucket_path }}
        - name: EXTENSION_SCRIPT
          value: /data/data-loader/load-neo4j.sh
        - name: SYNC_PATH
          value: data-loader
        - name: GRAPH_WIPE
{% if graph_wipe %}
          value: "yes"
{% else %}
          value: "no"
{% endif %}
        - name: CYPHER_ROOT
          value: /data
        - name: CYPHER_ONCE_CONTENT
          value: "{{ graph_cypher_script_once_content|default('', true) }}"
        - name: CYPHER_ALWAYS_CONTENT
          value: "{{ graph_cypher_script_always_content|default('', true) }}"
        # If we provide NEO4J_dbms_directories_logs
        # the debug log is erased by the loader.
        - name: NEO4J_dbms_directories_logs
          value: /data/logs
{% if graph_loader_post_sleep_s %}
        # A fixed period of sleeping after completion
        # (for debug)
        - name: POST_SLEEP_S
          value: "{{ graph_loader_post_sleep_s }}"
{% endif %}
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - mountPath: /data
          name: graph-volume
{% if graph_s3_endpoint %}
        - name: s3-config
          mountPath: /home/loader/.aws/config
          subPath: config
{% endif %}

      containers:
      - name: graph
{% if graph_use_enterprise_edition %}
        image: "{{ graph_image_registry }}/{{ graph_image }}:{{ graph_tag }}-enterprise"
{% else %}
        image: "{{ graph_image_registry }}/{{ graph_image }}:{{ graph_tag }}"
{% endif %}
        imagePullPolicy: {{ graph_pull_policy }}
        ports:
        - containerPort: 7474
          name: http
        - containerPort: 7687
          name: bolt
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - /readiness-probe.sh
          initialDelaySeconds: 30
          timoutSeconds: 4
          periodSeconds: 20
        env:
        - name: NEO4J_dbms_memory_pagecache_size
          value: "{{ graph_pagecache_size_g }}G"
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "{{ graph_heap_g }}G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "{{ graph_heap_g }}G"
        - name: NEO4J_dbms_directories_data
          value: /data/data
        - name: NEO4J_dbms_directories_logs
          value: /data/logs
        - name: NEO4J_dbms_connector_bolt_listen__address
          value: 0.0.0.0:7687
        - name: NEO4J_dbms_connector_bolt_advertised__address
          value: 0.0.0.0:7687
        - name: NEO4J_AUTH
          value: neo4j/{{ graph_password }}
        - name: IMPORT_DIRECTORY
          value: /data/data-loader
        - name: IMPORT_TO
          value: graph
        - name: EXTENSION_SCRIPT
          value: /data/data-loader/load-neo4j.sh
        - name: CYPHER_PRE_NEO4J_SLEEP
          value: '60'
        - name: CYPHER_ROOT
          value: /data
        - name: GRAPH_PASSWORD
          value: "{{ graph_password }}"
        resources:
          limits:
            cpu: "{{ graph_core_limit }}"
          requests:
            cpu: "{{ graph_core_request }}"
            memory: "{{ graph_mem_request_g }}Gi"
        volumeMounts:
        - mountPath: /data
          name: graph-volume

      volumes:
      - name: graph-volume
        persistentVolumeClaim:
          claimName: {{ graph_pvc }}
{% if graph_s3_endpoint %}
      - name: s3-config
        configMap:
          name: s3-config
{% endif %}
