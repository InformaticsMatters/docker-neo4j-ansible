---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: graph
  namespace: {{ graph_namespace }}
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: graph
  serviceName: graph
  template:
    metadata:
      name: graph
      labels:
        name: graph
    spec:
      serviceAccountName: {{ graph_sa }}
      securityContext:
        fsGroup: 2000

      # A 'preferred' (not guaranteed)
      # node selection affinity...
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: purpose
                operator: In
                values:
                - {{ graph_node_purpose }}

      # Node tolerations
      # (tolerate high-mem nodes to allow us to run on them)
      tolerations:
      - key: purpose
        operator: Equal
        value: {{ graph_node_purpose }}
        effect: "NoSchedule"

      # The initContainers stage simply invokes the loader image
      # which is responsible for synchronising the chosen S3 graph
      # data with the container's 'loader' directory.
      initContainers:
      - name: graph-loader
        image: "{{ graph_loader_image }}:{{ graph_tag }}"
        imagePullPolicy: {{ graph_pull_policy }}
        terminationMessagePolicy: FallbackToLogsOnError
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: graph-secrets
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: graph-secrets
              key: aws_secret_access_key
        - name: AWS_DEFAULT_REGION
          value: {{ aws_default_region }}
        - name: AWS_BUCKET
          value: {{ graph_bucket }}
        - name: AWS_BUCKET_PATH
          value: {{ graph_bucket_path }}
        - name: SYNC_PATH
          value: data-loader
        - name: GRAPH_WIPE
{% if graph_wipe %}
          value: "yes"
{% else %}
          value: "no"
{% endif %}
        - name: CYPHER_ROOT
          value: /data
        - name: CYPHER_ONCE_CONTENT
          value: "{{ graph_cypher_script_once_content|default('', true) }}"
        - name: CYPHER_ALWAYS_CONTENT
          value: "{{ graph_cypher_script_always_content|default('', true) }}"
        resources:
          limits:
            cpu: 1000m
            memory: 1Gi
          requests:
            cpu: 1000m
            memory: 1Gi
        volumeMounts:
        - mountPath: /data
          name: graph-volume
      volumes:
      - name: graph-volume
        persistentVolumeClaim:
          claimName: {{ graph_pvc }}

      containers:
      - name: graph
{% if graph_use_enterprise_edition %}
        image: "{{ graph_image }}:{{ graph_tag }}-enterprise"
{% else %}
        image: "{{ graph_image }}:{{ graph_tag }}"
{% endif %}
        imagePullPolicy: {{ graph_pull_policy }}
        ports:
        - containerPort: 7474
          name: http
        - containerPort: 7687
          name: bolt
        env:
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: graph-secrets
              key: neo4j_auth
        - name: NEO4J_dbms_memory_pagecache_size
          value: "{{ graph_pagecache_size_g }}G"
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "{{ graph_heap_g }}G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "{{ graph_heap_g }}G"
        - name: NEO4J_dbms_directories_data
          value: /data/data
        - name: NEO4J_dbms_directories_logs
          value: /data/logs
        - name: NEO4J_dbms_connector_bolt_listen__address
          value: 0.0.0.0:7687
        - name: NEO4J_dbms_connector_bolt_advertised__address
          value: 0.0.0.0:7687
        - name: IMPORT_DIRECTORY
          value: /data/data-loader
        - name: IMPORT_TO
          value: graph
        - name: EXTENSION_SCRIPT
          value: /data/data-loader/load-neo4j.sh
        - name: CYPHER_PRE_NEO4J_SLEEP
          value: '60'
        - name: CYPHER_ROOT
          value: /data
        resources:
          limits:
            cpu: "{{ graph_core_limit }}"
          requests:
            cpu: "{{ graph_core_request }}"
            memory: "{{ graph_mem_request_g }}Gi"
        volumeMounts:
        - mountPath: /data
          name: graph-volume
      volumes:
      - name: graph-volume
        persistentVolumeClaim:
          claimName: {{ graph_pvc }}
