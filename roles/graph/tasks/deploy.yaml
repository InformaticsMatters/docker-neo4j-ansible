---

- block:

  - name: Check configuration
    assert:
      that:
      - graph_core_request|int > 0
      - graph_core_limit|int >= graph_core_request|int
      - graph_password|string|length > 0
      - graph_password|string != 'neo4j'

  # Check or create the namespace...

  - name: Get expected namespace
    k8s_facts:
      kind: Namespace
      name: "{{ graph_namespace }}"
    register: namespace_info

  - name: Assert namespace exists
    assert:
      that: namespace_info.resources|length > 0
      fail_msg: Namespace '{{ graph_namespace }}' does not exist
    when: graph_volume_size_g|int == 0

  - name: Create namespace
    k8s:
      definition: "{{ lookup('template', 'namespace.yaml.j2') }}"
    when: graph_volume_size_g|int > 0

  - name: Create Service Account
    k8s:
      definition: "{{ lookup('template', 'serviceaccount.yaml.j2') }}"

  - block:

    - name: Get Service Accont Role
      k8s_facts:
        kind: Role
        api_version: rbac.authorization.k8s.io/v1beta1
        name: "{{ graph_sa_role }}"
      register: role_fact

    - name: Check Service Accont Role
      assert:
        that: role_fact.resources|length == 1

    - name: Bind Role to Service Account
      k8s:
        definition: "{{ lookup('template', 'rolebinding.yaml.j2') }}"

    when: graph_sa_role|string|length > 0

  # Deploy volume claims

  - name: Assert volume variables
    assert:
      that: graph_pvc_storage_class|length > 0
    when: graph_volume_size_g|int > 0

  - name: Deploy volume claim
    k8s:
      definition: "{{ lookup('template', 'graph-pvc.yaml.j2') }}"
      wait: yes
    when: graph_volume_size_g|int > 0

  # Deploy other objects

  - name: Check graph Deployment
    k8s_facts:
      kind: Deployment
      name: graph-pod
      namespace: "{{ graph_namespace }}"
    register: deployment_result

  - name: Deploy secrets
    k8s:
      definition: "{{ lookup('template', 'secrets.yaml.j2') }}"
    when: deployment_result.resources|length == 0

  # Deploy the loader?
  # Only if the graph is not already deployed.

  - import_tasks: deploy-loader.yaml
    when:
    - graph_loader_deploy|bool
    - deployment_result.resources|length == 0

  # Deploy the graph...

  - name: Deploy Graph
    k8s:
      definition: "{{ lookup('template', 'graph-deployment.yaml.j2') }}"
      wait: yes
      wait_timeout: "{{ graph_pod_ready_timeout }}"
    when: deployment_result.resources|length == 0

  - name: Deploy Graph Services
    k8s:
      definition: "{{ lookup('template', item) }}"
    loop:
    - http-service.yaml.j2
    - bolt-service.yaml.j2

  module_defaults:
    group/k8s:
      host: "{{ k8s_auth_host }}"
      api_key: "{{ k8s_auth_api_key }}"

